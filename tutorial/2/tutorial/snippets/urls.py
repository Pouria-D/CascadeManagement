from django.urls import path
from snippets import views
from rest_framework.urlpatterns import format_suffix_patterns
from django.conf.urls import include

from snippets.views import SnippetViewSet, UserViewSet, ChangePasswordView
from rest_framework import renderers
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from snippets import views

from django.conf.urls import url
from rest_framework import routers, viewsets
from django.views.decorators.csrf import csrf_exempt
from django.contrib.auth.decorators import login_required

from rest_framework.authtoken.views import obtain_auth_token  # <-- Here

from .views import login

snippet_list = SnippetViewSet.as_view({
    'get': 'list',
    'post': 'create'
})
snippet_detail = SnippetViewSet.as_view({
    'get': 'retrieve',
    'put': 'update',
    'patch': 'partial_update',
    'delete': 'destroy'
})
snippet_highlight = SnippetViewSet.as_view({
    'get': 'highlight'
}, renderer_classes=[renderers.StaticHTMLRenderer])
user_list = UserViewSet.as_view({
    'get': 'list'
})
user_detail = UserViewSet.as_view({
    'get': 'retrieve'
})

urlpatterns = format_suffix_patterns([
    
    path('snippets/', login_required(snippet_list), name='snippet-list'),
    path('snippets/<int:pk>/', login_required(snippet_detail), name='snippet-detail'),
    path('snippets/<int:pk>/highlight/', login_required(snippet_highlight), name='snippet-highlight'),
    path('users/', user_list, name='user-list'),
    path('users/<int:pk>/', user_detail, name='user-detail')
])

class DefaultRouterWithSimpleViews(routers.DefaultRouter):
    """
    Extends functionality of DefaultRouter adding possibility
    to register simple API views, not just Viewsets.
    """

    def get_routes(self, viewset):
        """
        Checks if the viewset is an instance of ViewSet,
        otherwise assumes it's a simple view and does not run
        original `get_routes` code.
        """
        if issubclass(viewset, viewsets.ViewSetMixin):
            return super(DefaultRouterWithSimpleViews, self).get_routes(viewset)

        return []

    def get_urls(self):
        """
        Append non-viewset views to the urls
        generated by the original `get_urls` method.
        """    
        # URLs for simple views
        ret = []
        for prefix, viewset, basename in self.registry:

            # Skip viewsets
            if issubclass(viewset, viewsets.ViewSetMixin):
                continue

            # URL regex
            regex = '{prefix}{trailing_slash}$'.format(
                prefix=prefix,
                trailing_slash=self.trailing_slash
            )

            # The view name has to have suffix "-list" due to specifics
            # of the DefaultRouter implementation.
            ret.append(url(
                regex, viewset.as_view(),
                name='{0}-list'.format(basename)
            ))

        # Format suffixes
        ret = format_suffix_patterns(ret, allowed=['json', 'html'])

        # Prepend URLs for viewsets and return
        return super(DefaultRouterWithSimpleViews, self).get_urls() + ret


# Create a router and register our viewsets with it.
"""
router = DefaultRouterWithSimpleViews()
router.register(r'snippets', views.SnippetViewSet, 'snippets')
router.register(r'users', views.UserViewSet, 'users')
router.register(r'change password', views.ChangePasswordView, 'change password' )
"""
router = DefaultRouter()
router = DefaultRouterWithSimpleViews()

router.register(r'snippets', views.SnippetViewSet)
router.register(r'users', views.UserViewSet)

router.register(r'change password', views.ChangePasswordView, 'change password' )

# The API URLs are now determined automatically by the router.
urlpatterns = [
    path('api-token-auth/', obtain_auth_token, name='api_token_auth'),  # <-- And here
    
    path('snippets/', login_required(snippet_list), name='snippet-list'),
    path('remote/snippets/', snippet_list ,name='snippet-list'),
    path('snippets/<int:pk>/', login_required(snippet_detail), name='snippet-detail'),
    path('snippets/<int:pk>/highlight/', login_required(snippet_highlight), name='snippet-highlight'),
    path('users/', login_required(user_list), name='user-list'),
    path('users/<int:pk>/', login_required(user_detail), name='user-detail'),
    path('api/change-password/', ChangePasswordView.as_view(), name='change-password'),
    #path('accounts/', include('rest_framework.urls')),
    path('accounts/',login),
    path('accounts/logout', include(router.urls) ),
    #path('', login_required(include(router.urls))),
    path('', include(router.urls)),
]
"""
######### using view not view sets ...
urlpatterns = [
    path('snippets/', views.SnippetList.as_view(), name='snippet-list'),
    path('snippets/<int:pk>/', views.SnippetDetail.as_view(), name='snippet-detail'),
    path('users/', views.UserList.as_view(), name='user-list'),
    path('users/<int:pk>/', views.UserDetail.as_view(), name='user-detail'),
    path('api-auth/', include('rest_framework.urls')),
    path('', views.api_root),
    path('snippets/<int:pk>/highlight/', views.SnippetHighlight.as_view(), name='snippet-highlight'),
]

urlpatterns = format_suffix_patterns(urlpatterns)

########## Functionally_based view !
urlpatterns = [
    path('snippets/', views.snippet_list),
    path('snippets/<int:pk>/', views.snippet_detail),
]

urlpatterns = format_suffix_patterns(urlpatterns)
"""
