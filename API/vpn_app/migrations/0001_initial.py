# Generated by Django 2.0.3 on 2018-04-10 07:33

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('entity_app', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='l2VPNBridge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cascade_name', models.CharField(max_length=50, unique=True, verbose_name='Cascade Name')),
                ('type_connection',
                 models.CharField(choices=[('tcp', 'TCP'), ('udp', 'UDP')], default='udp', max_length=5,
                                  verbose_name='Service Protocole')),
                ('vpnserver_ip', models.GenericIPAddressField(verbose_name='VPN Server IP')),
                ('vpnbridge_interface', models.CharField(max_length=20, verbose_name='Local Bridge Interface')),
            ],
        ),
        migrations.CreateModel(
            name='l2VPNServer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cascade_name', models.CharField(max_length=50, unique=True, verbose_name='Cascade Name')),
                ('type_connection',
                 models.CharField(choices=[('tcp', 'TCP'), ('udp', 'UDP')], default='udp', max_length=5,
                                  verbose_name='Service Protocole')),
                ('vpnserver_interface', models.CharField(max_length=20, verbose_name='Local Bridge Interface')),
            ],
        ),
        migrations.CreateModel(
            name='Tunnel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('gre', 'GRE'), ('ipip', 'IPIP'), ('vtun', 'VTUN')], max_length=10,
                                          verbose_name='Encapsulation Type')),
                ('virtual_local_endpoint', models.GenericIPAddressField(verbose_name='Virtual Local Endpoint')),
                ('virtual_remote_endpoint', models.GenericIPAddressField(verbose_name='Virtual Remote Endpoint')),
                ('mtu', models.PositiveSmallIntegerField(default=1500,
                                                         validators=[django.core.validators.MinValueValidator(647),
                                                                     django.core.validators.MaxValueValidator(1500)],
                                                         verbose_name='MTU')),
                ('mode',
                 models.CharField(blank=True, choices=[('server', 'Server'), ('client', 'Client')], max_length=10,
                                  null=True, verbose_name='VTUN Mode')),
                (
                'server_endpoint', models.GenericIPAddressField(blank=True, null=True, verbose_name='Remote Endpoint')),
                ('service_protocol',
                 models.CharField(blank=True, choices=[('tcp', 'TCP'), ('udp', 'UDP')], max_length=3, null=True,
                                  verbose_name='Service Protocol')),
                ('service_port', models.PositiveIntegerField(blank=True, null=True,
                                                             validators=[django.core.validators.MinValueValidator(1),
                                                                         django.core.validators.MaxValueValidator(
                                                                             65535)], verbose_name='Service Port')),
                ('real_local_endpoint',
                 models.GenericIPAddressField(blank=True, null=True, verbose_name='Real Local Endpoint')),
                ('real_remote_endpoint',
                 models.GenericIPAddressField(blank=True, null=True, verbose_name='Real Remote Endpoint')),
            ],
        ),
        migrations.CreateModel(
            name='VPN',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('is_enabled', models.BooleanField(default=True, verbose_name='Is Enabled')),
                ('phase1_encryption_algorithm', models.CharField(
                    choices=[('paya256', 'PAYA-256'), ('3des', '3DES'), ('aes128', 'AES-128'), ('aes192', 'AES-192'),
                             ('aes256', 'AES-256')], max_length=10, verbose_name='Phase1 Encryption Algorithm')),
                ('phase1_authentication_algorithm', models.CharField(
                    choices=[('md5', 'MD5'), ('md5-128', 'MD5-128'), ('sha-1', 'SHA-1'), ('sha-256', 'SHA-256')],
                    max_length=10, verbose_name='Phase1 Authentication Algorithm')),
                ('phase1_diffie_hellman_group', models.CharField(
                    choices=[('1', 'DH768'), ('2', 'DH1024'), ('5', 'DH1536'), ('14', 'DH2048'), ('15', 'DH3072'),
                             ('16', 'DH4096')], max_length=2, verbose_name='Phase1 Diffie Hellman Group')),
                ('phase1_lifetime', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1),
                                                                            django.core.validators.MaxValueValidator(
                                                                                999)], verbose_name='Phase1 Lifetime')),
                ('phase2_encryption_algorithm', models.CharField(
                    choices=[('paya256', 'PAYA-256'), ('3des', '3DES'), ('aes128', 'AES-128'), ('aes192', 'AES-192'),
                             ('aes256', 'AES-256')], max_length=10, verbose_name='Phase2 Encryption Algorithm')),
                ('phase2_authentication_algorithm', models.CharField(
                    choices=[('md5', 'MD5'), ('md5-128', 'MD5-128'), ('sha-1', 'SHA-1'), ('sha-256', 'SHA-256')],
                    max_length=10, verbose_name='Phase2 Authentication Algorithm')),
                ('phase2_diffie_hellman_group', models.CharField(
                    choices=[('1', 'DH768'), ('2', 'DH1024'), ('5', 'DH1536'), ('14', 'DH2048'), ('15', 'DH3072'),
                             ('16', 'DH4096')], max_length=2, verbose_name='Phase2 Diffie Hellman Group')),
                ('phase2_lifetime', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1),
                                                                            django.core.validators.MaxValueValidator(
                                                                                999)], verbose_name='Phase2 Lifetime')),
                ('local_endpoint', models.GenericIPAddressField(verbose_name='Local Endpoint')),
                ('local_id', models.CharField(max_length=255, unique=True, verbose_name='Local ID')),
                ('remote_endpoint', models.GenericIPAddressField(verbose_name='Remote Endpoint')),
                ('peer_id', models.CharField(max_length=255, unique=True, verbose_name='Peer ID')),
                ('authentication_method',
                 models.CharField(choices=[('preshared', 'Preshared'), ('RSA', 'RSA')], default='preshared',
                                  max_length=15, verbose_name='Authentication Method')),
                ('preshared_key', models.CharField(max_length=255, verbose_name='Preshared Key')),
                ('preshared_key_expire_date',
                 models.DateTimeField(blank=True, null=True, verbose_name='Preshared Key Expire Date')),
                ('dpd', models.BooleanField(default=True, verbose_name='Dead Peer Detection')),
                ('last_operation', models.CharField(blank=True,
                                                    choices=[('add', 'add'), ('delete', 'delete'), ('update', 'update'),
                                                             ('restart', 'restart')], max_length=20, null=True,
                                                    verbose_name='Last Operation')),
                ('status', models.CharField(blank=True, choices=[('pending', 'pending'), ('failed', 'failed'),
                                                                 ('succeeded', 'succeeded'), ('disabled', 'disabled')],
                                            max_length=20, null=True, verbose_name='Status')),
                ('local_network', models.ManyToManyField(related_name='_vpn_local_network_+', to='entity_app.Address')),
                ('remote_network',
                 models.ManyToManyField(related_name='_vpn_remote_network_+', to='entity_app.Address')),
                ('tunnel', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                                to='vpn_app.Tunnel')),
            ],
        ),
    ]
