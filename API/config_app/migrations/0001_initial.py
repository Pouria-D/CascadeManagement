# Generated by Django 2.0.4 on 2018-04-15 12:52

import django.contrib.postgres.fields
import django.core.files.storage
import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('entity_app', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AdminLoginLock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip', models.GenericIPAddressField()),
                ('num_of_retry', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Backup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(blank=True, null=True,
                                          storage=django.core.files.storage.FileSystemStorage(location='/var/ngfw/'),
                                          upload_to='', verbose_name='File')),
                ('description', models.CharField(blank=True, max_length=255, null=True, verbose_name='Description')),
                ('datetime', models.DateTimeField(auto_now_add=True, verbose_name='Datetime')),
                ('version', models.CharField(blank=True, max_length=100, null=True, verbose_name='Version')),
                ('is_uploaded_by_user', models.BooleanField(default=False)),
                (
                    'last_operation',
                    models.CharField(blank=True, max_length=7, null=True, verbose_name='Last Operation')),
                ('status', models.CharField(blank=True, choices=[('pending', 'pending'), ('failed', 'failed'),
                                                                 ('succeeded', 'succeeded')], max_length=20, null=True,
                                            verbose_name='Status')),
            ],
            options={
                'verbose_name': 'Backup',
                'verbose_name_plural': 'Backups',
            },
        ),
        migrations.CreateModel(
            name='CaptivePortalConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_enabled', models.BooleanField(default=False, verbose_name='Is enabled')),
            ],
            options={
                'verbose_name': 'Captive portal configuration',
                'verbose_name_plural': 'Captive portal configurations',
            },
        ),
        migrations.CreateModel(
            name='DHCPServerConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, validators=[
                    django.core.validators.RegexValidator('^[0-9a-zA-Z\\,_.-]*$',
                                                          'Only alphanumeric characters are allowed.')],
                                          verbose_name='Name')),
                ('description', models.CharField(blank=True, max_length=255, null=True, verbose_name='Description')),
                ('is_enabled', models.BooleanField(default=True, verbose_name='Is enabled')),
                ('start_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='Start IP address')),
                ('end_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='End IP address')),
                ('exclude_ip_list', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True,
                                                                                   verbose_name='Exclude IP address list')),
                ('gateway', models.GenericIPAddressField(blank=True, null=True, verbose_name='Gateway address')),
                ('dns_server_list',
                 django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='DNS server list')),
            ],
            options={
                'verbose_name': 'DHCP server configuration',
                'verbose_name_plural': 'DHCP servers configuration',
            },
        ),
        migrations.CreateModel(
            name='Interface',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, validators=[
                    django.core.validators.RegexValidator('^[0-9a-zA-Z\\,_.-]*$',
                                                          'Only alphanumeric characters are allowed.')],
                                          verbose_name='Name')),
                ('description', models.CharField(blank=True, max_length=255, null=True, verbose_name='Description')),
                ('alias', models.CharField(blank=True, max_length=100, null=True, unique=True, validators=[
                    django.core.validators.RegexValidator('^[0-9a-zA-Z\\,_.-]*$',
                                                          'Only alphanumeric characters are allowed.')],
                                           verbose_name='Alias')),
                ('ip_list',
                 django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='IP address list')),
                ('gateway', models.GenericIPAddressField(blank=True, null=True, verbose_name='Gateway address')),
                ('is_default_gateway', models.BooleanField(default=False, verbose_name='Is default gateway')),
                ('is_dhcp_enabled', models.BooleanField(default=False, verbose_name='Is DHCP enabled')),
                ('type', models.CharField(blank=True, choices=[('WAN', 'WAN'), ('LAN', 'LAN')], max_length=3, null=True,
                                          verbose_name='Type')),
                ('dns_server_list', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True,
                                                                                   verbose_name='DNS servers list')),
                ('is_enabled', models.BooleanField(default=False, verbose_name='Is enabled')),
                ('link_type',
                 models.CharField(choices=[('Ethernet', 'Ethernet'), ('PPPOE', 'PPPoE')], default='Ethernet',
                                  max_length=10, verbose_name='Link type')),
                ('pppoe_username', models.CharField(blank=True, max_length=255, null=True, validators=[
                    django.core.validators.RegexValidator('^[0-9a-zA-Z\\,_.-]*$',
                                                          'Only alphanumeric characters are allowed.')],
                                                    verbose_name='PPPOE username')),
                ('pppoe_password',
                 models.CharField(blank=True, max_length=255, null=True, verbose_name='PPPOE password')),
                ('mtu', models.PositiveSmallIntegerField(default=1500)),
                ('last_operation',
                 models.CharField(blank=True, choices=[('save_in_db', 'Save in DB'), ('update', 'update')],
                                  max_length=20, null=True, verbose_name='Last Operation')),
                ('status', models.CharField(blank=True, choices=[('pending', 'pending'), ('failed', 'failed'),
                                                                 ('succeeded', 'succeeded'), ('disabled', 'disabled')],
                                            max_length=20, null=True, verbose_name='Status')),
            ],
            options={
                'verbose_name': 'Interface',
                'verbose_name_plural': 'Interfaces',
            },
        ),
        migrations.CreateModel(
            name='LogServer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.GenericIPAddressField(verbose_name='Address')),
                ('port', models.IntegerField(verbose_name='Port')),
                ('protocol', models.CharField(choices=[('udp', 'udp'), ('tcp', 'tcp')], default='udp', max_length=3,
                                              verbose_name='Protocol type')),
                ('is_secure', models.BooleanField(default=False, verbose_name='Is Secure')),
                ('service_list', django.contrib.postgres.fields.ArrayField(
                    base_field=models.CharField(choices=[('vpn', 'vpn'), ('ssh', 'ssh'), ('policy', 'policy')],
                                                max_length=10), size=None)),
                ('is_enabled', models.BooleanField(default=True)),
                (
                    'last_operation',
                    models.CharField(blank=True, max_length=7, null=True, verbose_name='Last Operation')),
                ('status', models.CharField(blank=True, choices=[('pending', 'pending'), ('failed', 'failed'),
                                                                 ('succeeded', 'succeeded'), ('disabled', 'disabled')],
                                            max_length=20, null=True, verbose_name='Status')),
            ],
            options={
                'verbose_name': 'Log Server',
                'verbose_name_plural': 'Log Servers',
            },
        ),
        migrations.CreateModel(
            name='NTPConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_enabled', models.BooleanField(default=False, verbose_name='Is NTP enabled')),
                ('ntp_server_list',
                 django.contrib.postgres.fields.jsonb.JSONField(blank=True, max_length=255, null=True,
                                                                verbose_name='NTP server address')),
                (
                    'last_operation',
                    models.CharField(blank=True, max_length=7, null=True, verbose_name='Last Operation')),
                ('status', models.CharField(blank=True, choices=[('pending', 'pending'), ('failed', 'failed'),
                                                                 ('succeeded', 'succeeded'), ('disabled', 'disabled')],
                                            max_length=20, null=True, verbose_name='Status')),
            ],
            options={
                'verbose_name': 'NTP configuration',
                'verbose_name_plural': 'NTP configurations',
            },
        ),
        migrations.CreateModel(
            name='Setting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=255, unique=True)),
                ('value', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='StaticRoute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, validators=[
                    django.core.validators.RegexValidator('^[0-9a-zA-Z\\,_.-]*$',
                                                          'Only alphanumeric characters are allowed.')],
                                          verbose_name='Name')),
                ('description', models.CharField(blank=True, max_length=255, null=True, verbose_name='Description')),
                ('is_enabled', models.BooleanField(default=True, verbose_name='Is enabled')),
                ('destination_ip', models.GenericIPAddressField(verbose_name='Destination IP')),
                ('destination_mask',
                 models.CharField(blank=True, max_length=255, null=True, verbose_name='Destination mask')),
                ('gateway', models.GenericIPAddressField(verbose_name='Gateway')),
                ('metric', models.PositiveIntegerField(blank=True, null=True, verbose_name='Metric')),
                ('last_operation',
                 models.CharField(blank=True, choices=[('add', 'add'), ('delete', 'delete'), ('update', 'update')],
                                  max_length=20, null=True, verbose_name='Last Operation')),
                ('status', models.CharField(blank=True, choices=[('pending', 'pending'), ('failed', 'failed'),
                                                                 ('succeeded', 'succeeded'), ('disabled', 'disabled')],
                                            max_length=20, null=True, verbose_name='Status')),
                ('interface', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                                related_name='static_route', to='config_app.Interface',
                                                verbose_name='Interface')),
            ],
            options={
                'verbose_name': 'Static route',
                'verbose_name_plural': 'Static routes',
            },
        ),
        migrations.CreateModel(
            name='UpdateConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_automatic_update_enabled',
                 models.BooleanField(default=False, verbose_name='Is automatic update enabled')),
                ('update_server',
                 models.CharField(blank=True, max_length=255, null=True, verbose_name='Update server address')),
                ('schedule', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                               to='entity_app.Schedule', verbose_name='Schedule')),
            ],
            options={
                'verbose_name': 'Update configuration',
                'verbose_name_plural': 'Update configurations',
            },
        ),
        migrations.AlterUniqueTogether(
            name='logserver',
            unique_together={('address', 'port', 'protocol')},
        ),
        migrations.AddField(
            model_name='dhcpserverconfig',
            name='interface',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    to='config_app.Interface'),
        ),
        migrations.AddField(
            model_name='captiveportalconfig',
            name='lan_interface',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='LAN', to='config_app.Interface', verbose_name='LAN interface'),
        ),
        migrations.AddField(
            model_name='captiveportalconfig',
            name='wan_interface_list',
            field=models.ManyToManyField(related_name='WANs', to='config_app.Interface', verbose_name='WAN interfaces'),
        ),
    ]
