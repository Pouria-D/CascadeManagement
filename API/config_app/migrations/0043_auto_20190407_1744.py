# Generated by Django 2.1.3 on 2019-04-07 17:44
import django.core.validators

from django.db import migrations, models

interface_dict = {}


# find the id of interface that was used in any of the above tables
# find the name of each interface
# replace interface_id with the name of interface
#

def create_id_name_dict(apps, schema_editor):
    Interface_Model = apps.get_model('config_app', 'Interface')
    for interface in Interface_Model.objects.all():
        interface_dict[str(interface.id)] = interface.name


def change_interface_id_to_name(apps, schema_editor):
    Interface_Model = apps.get_model('config_app', 'Interface')
    # print(apps.get_models(include_auto_created=True))

    DHCP_Model = apps.get_model('config_app', 'DHCPServerConfig')
    for dhcp in DHCP_Model.objects.all():
        if dhcp.interface_id:
            dhcp.interface = Interface_Model.objects.get(name=interface_dict[dhcp.interface_id])
            dhcp.save()

    DNSConfig_interface_list_Model = apps.get_model('config_app', 'DNSConfig_interface_list')
    for dns_config in DNSConfig_interface_list_Model.objects.all():
        if dns_config.interface_id:
            dns_config.interface_id = Interface_Model.objects.get(name=interface_dict[dns_config.interface_id])
            dns_config.save()

    StaticRoute_Model = apps.get_model('config_app', 'StaticRoute')
    for static_route in StaticRoute_Model.objects.all():
        if static_route.interface_id:
            static_route.interface = Interface_Model.objects.get(name=interface_dict[static_route.interface_id])
            static_route.save()

    Firewall_src_interface_list_Model = apps.get_model('firewall_app', 'SourceDestination_src_interface_list')
    for interface in Firewall_src_interface_list_Model.objects.all():
        if interface.interface_id:
            interface.interface_id = Interface_Model.objects.get(name=interface_dict[interface.interface_id])
            interface.save()

    Firewall_dst_interface_list_Model = apps.get_model('firewall_app', 'SourceDestination_dst_interface_list')
    for interface in Firewall_dst_interface_list_Model.objects.all():
        if interface.interface_id:
            interface.interface_id = Interface_Model.objects.get(name=interface_dict[interface.interface_id])
            interface.save()



class Migration(migrations.Migration):
    dependencies = [
        ('config_app', '0042_auto_20190316_1700'),
        ('firewall_app', '0017_qos_status'),
    ]
    interface_id_name = {}
    operations = [
        migrations.RunPython(create_id_name_dict),
        migrations.RemoveField(
            model_name='captiveportalconfig',
            name='lan_interface',
        ),
        migrations.RemoveField(
            model_name='captiveportalconfig',
            name='wan_interface_list',
        ),
        migrations.DeleteModel(
            name='CaptivePortalConfig',
        ),

        migrations.RemoveField(
            model_name='interface',
            name='id',
        ),

        migrations.AlterField(
            model_name='interface',
            name='name',
            field=models.CharField(max_length=10, primary_key=True, serialize=False, unique=True, validators=[
                django.core.validators.RegexValidator('^[0-9a-zA-Z\\,_.-]*$',
                                                      'Only alphanumeric characters are allowed.')],
                                   verbose_name='Name'),
        ),

        migrations.RunSQL('ALTER TABLE config_app_dhcpserverconfig ALTER interface_id TYPE varchar(32);'),
        migrations.RunSQL(
            'ALTER TABLE config_app_dnsconfig_interface_list ALTER interface_id TYPE varchar(32);'),
        migrations.RunSQL('ALTER TABLE config_app_staticroute ALTER interface_id TYPE varchar(32);'),
        migrations.RunSQL(
            'ALTER TABLE firewall_app_sourcedestination_src_interface_list ALTER interface_id TYPE varchar(32);'),
        migrations.RunSQL(
            'ALTER TABLE firewall_app_sourcedestination_dst_interface_list ALTER interface_id TYPE varchar(32);'),

        migrations.RunPython(change_interface_id_to_name),

    ]
