"""
Django settings for api project.

Generated by 'django-admin startproject' using Django 2.0.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""
import logging.config
import os
import sys

import mongoengine
import urllib3



#################################################
#ADMIN PANEL ENBALE

# for enabled admin panel put True #
ADMIN_ENABLED = False
#################################################




urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = ')qp3rcpo)_9rszk=rb9i&1cf@akha65rgnl=^z1@_y#!(bra+h'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'channels',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'root_runner',

    'auth_app',
    'config_app',
    'firewall_app',
    'logging_app',
    'qos_utils',
    'user_app',
    'vpn_app',
    'entity_app',
    'report_app',
    'diagnosis_app',
    'firewall_input_app',
    'rest_framework',
    'rest_framework_mongoengine',
    # 'debug_toolbar',
    'corsheaders',
    'django_extensions',
    'django_filters',
    'update_app',
    'pki_app',
    # 'silk'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',

    # todo: should be removed in production
    # 'utils.debug.DebugMiddleware',
    # 'debug_toolbar.middleware.DebugToolbarMiddleware',
    # 'silk.middleware.SilkyMiddleware',

    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

]

ROOT_URLCONF = 'api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'api.wsgi.application'
ASGI_APPLICATION = "api.routing.application"

# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'api',
        'USER': 'postgres',
        'PASSWORD': '',
        'HOST': '',
        'PORT': '',
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Tehran'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'

TEMPLATE_DIRS = (os.path.join(BASE_DIR, 'templates'),)

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAdminUser',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'auth_app.utils.IgnoreAuthForLocalhost',
        'auth_app.utils.ExpiringTokenAuthentication',

        # todo: should be removed in production
        'auth_app.utils.CsrfExemptSessionAuthentication',

    ),
    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',
                                'rest_framework.filters.SearchFilter',
                                'rest_framework.filters.OrderingFilter'),

    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 999
}

APPEND_SLASH = False
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

CORS_ORIGIN_ALLOW_ALL = True

AUTHENTICATION_BACKENDS = (
    'auth_app.utils.PAMBackend',
)

PAM_CREATE_USER = True
PAM_IS_SUPERUSER = True
PAM_IS_STAFF = True

IS_TEST = False
TEST_ADMIN_USERNAME = 'admin'
TEST_ADMIN_PASSWORD = 'admin'

if 'test' in sys.argv:
    IS_TEST = True

mongoengine.connect(
    db="log",
    host="localhost"
)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,

    'formatters': {
        'simple': {
            'format': '%(levelname)s %(name)s %(message)s'
        },
    },
    'handlers': {
        'syslog': {
            'level': 'DEBUG',
            'class': 'logging.handlers.SysLogHandler',
            'facility': 'local7',
            'address': '/dev/log',
            'formatter': 'simple'
        },
    },
    'loggers': {
        'security': {
            'handlers': ['syslog'],
            'level': 'DEBUG',
            'disabled': False,
        },
        'config': {
            'handlers': ['syslog'],
            'level': 'DEBUG',
            'disabled': False,
        },
        'entity': {
            'handlers': ['syslog'],
            'level': 'DEBUG',
            'disabled': False,
        },
        'firewall': {
            'handlers': ['syslog'],
            'level': 'DEBUG',
            'disabled': False,
        },
        'qos': {
            'handlers': ['syslog'],
            'level': 'DEBUG',
            'disabled': False,
        },
        'user': {
            'handlers': ['syslog'],
            'level': 'DEBUG',
            'disabled': False,
        },
        'vpn': {
            'handlers': ['syslog'],
            'level': 'DEBUG',
            'disabled': False,
        },
        'watcher': {
            'handlers': ['syslog'],
            'level': 'DEBUG',
            'disabled': False,
        },
        'report': {
            'handlers': ['syslog'],
            'level': 'DEBUG',
            'disabled': False,
        },
        'diagnosis': {
            'handlers': ['syslog'],
            'level': 'DEBUG',
            'disabled': False,
        }
    }
}

logging.config.dictConfig(LOGGING)

IGNORE_SESSION_RENEW_URLS = ('notification-list',)

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': '/tmp/django_cache',
    }
}

DEBUG_TOOLBAR_CONFIG = {
    "SHOW_TOOLBAR_CALLBACK": lambda request: True,
}

BACKUP_DIR = '/var/ngfw/'
POLICY_BACK_POSTFIX = 'policy_back'

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("127.0.0.1", 6379)],
        },
    },
}


class DBRouter(object):
    """
    A router to control all database operations on TenderLog model in the
    logging application.
    """

    # def db_for_read(self, model, **hints):
    #     """
    #     Attempts to read TenderLog model go to Syslog db.
    #     """
    #     if "_test" in model.__name__:
    #         return 'Syslog'
    #     else:
    #         return 'default'

    def allow_migrate(self, db, app_label, model_name=None, **hints):
        """
        Make sure the TenderLog table only appears in the 'Syslog'
        database.
        """
        if model_name and "fortest" in model_name.lower():
            return IS_TEST

        return db == 'default'


TEST_RUNNER = 'xmlrunner.extra.djangotestrunner.XMLTestRunner'
TEST_OUTPUT_FILE_NAME = "TEST-API.xml"
DATABASE_ROUTERS = ['api.settings.DBRouter']
