# Generated by Django 2.0.3 on 2018-04-10 07:33

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AccessRight',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access_right', models.CharField(default=None, max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='AccessTime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, validators=[
                    django.core.validators.RegexValidator('^[0-9a-zA-Z\\,_.-]*$',
                                                          'Only alphanumeric characters are allowed.')],
                                          verbose_name='Name')),
                ('status', models.IntegerField(blank=True, default=0, verbose_name='Status')),
                ('sat_start_access_time',
                 models.TimeField(blank=True, default=None, null=True, verbose_name='Saturday start time')),
                ('sat_end_access_time',
                 models.TimeField(blank=True, default=None, null=True, verbose_name='Saturday end time')),
                ('sun_start_access_time',
                 models.TimeField(blank=True, default=None, null=True, verbose_name='Sunday start time')),
                ('sun_end_access_time',
                 models.TimeField(blank=True, default=None, null=True, verbose_name='Sunday end time')),
                ('mon_start_access_time',
                 models.TimeField(blank=True, default=None, null=True, verbose_name='Monday start time')),
                ('mon_end_access_time',
                 models.TimeField(blank=True, default=None, null=True, verbose_name='Monday end time')),
                ('tue_start_access_time',
                 models.TimeField(blank=True, default=None, null=True, verbose_name='Tuesday start time')),
                ('tue_end_access_time',
                 models.TimeField(blank=True, default=None, null=True, verbose_name='Tuesday end time')),
                ('wed_start_access_time',
                 models.TimeField(blank=True, default=None, null=True, verbose_name='Wednsday start time')),
                ('wed_end_access_time',
                 models.TimeField(blank=True, default=None, null=True, verbose_name='Wednsday end time')),
                ('thu_start_access_time',
                 models.TimeField(blank=True, default=None, null=True, verbose_name='Thursday start time')),
                ('thu_end_access_time',
                 models.TimeField(blank=True, default=None, null=True, verbose_name='Thursday end time')),
                ('fri_start_access_time',
                 models.TimeField(blank=True, default=None, null=True, verbose_name='Friday start time')),
                ('fri_end_access_time',
                 models.TimeField(blank=True, default=None, null=True, verbose_name='Friday end time')),
                ('profile_access_enabled', models.BooleanField(default=False, verbose_name='Access status')),
            ],
            options={
                'verbose_name': 'Access Time',
                'verbose_name_plural': 'Access Times',
            },
        ),
        migrations.CreateModel(
            name='Accounting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, validators=[
                    django.core.validators.RegexValidator('^[0-9a-zA-Z\\,_.-]*$',
                                                          'Only alphanumeric characters are allowed.')],
                                          verbose_name='Name')),
                ('description', models.TextField(blank=True, max_length=500, verbose_name='Description')),
                ('status', models.IntegerField(blank=True, default=0, verbose_name='Status')),
                ('quota_daily_download',
                 models.PositiveIntegerField(blank=True, default=None, null=True, verbose_name='Quota daily download')),
                ('daily_unit_download',
                 models.CharField(choices=[('KB', 'KiloByte'), ('MB', 'MegaByte')], default='MB', max_length=2,
                                  verbose_name='Daily unit download')),
                ('quota_daily_upload',
                 models.PositiveIntegerField(blank=True, default=None, null=True, verbose_name='Quota daily upload')),
                ('daily_unit_upload',
                 models.CharField(choices=[('KB', 'KiloByte'), ('MB', 'MegaByte')], default='MB', max_length=2,
                                  verbose_name='Daily unit upload')),
                ('quota_weekly_download', models.PositiveIntegerField(blank=True, default=None, null=True,
                                                                      verbose_name='Quota weekly download')),
                ('weekly_unit_download',
                 models.CharField(choices=[('KB', 'KiloByte'), ('MB', 'MegaByte')], default='MB', max_length=2,
                                  verbose_name='Weekly unit download')),
                ('quota_weekly_upload',
                 models.PositiveIntegerField(blank=True, default=None, null=True, verbose_name='Quota weekly upload')),
                ('weekly_unit_upload',
                 models.CharField(choices=[('KB', 'KiloByte'), ('MB', 'MegaByte')], default='MB', max_length=2,
                                  verbose_name='Weekly unit upload')),
                ('quota_monthly_download', models.PositiveIntegerField(blank=True, default=None, null=True,
                                                                       verbose_name='Quota monthly download')),
                ('monthly_unit_download',
                 models.CharField(choices=[('KB', 'KiloByte'), ('MB', 'MegaByte')], default='MB', max_length=2,
                                  verbose_name='Monthly unit download')),
                ('quota_monthly_upload',
                 models.PositiveIntegerField(blank=True, default=None, null=True, verbose_name='Quota monthly upload')),
                ('monthly_unit_upload',
                 models.CharField(choices=[('KB', 'KiloByte'), ('MB', 'MegaByte')], default='MB', max_length=2,
                                  verbose_name='Monthly unit upload')),
                ('exceeded_quota_active', models.BooleanField(default=False, help_text='Active Exceeded Quota',
                                                              verbose_name='Active Exceeded Quota')),
                ('exceeded_quota', models.CharField(blank=True, default=None, max_length=3, null=True, validators=[
                    django.core.validators.RegexValidator('^[0-9]*$', 'Only numbers are allowed.')],
                                                    verbose_name='Download Bandwidth (kbit/s)')),
                ('exceeded_quota_upload', models.CharField(blank=True, default=None, max_length=3, null=True,
                                                           validators=[django.core.validators.RegexValidator('^[0-9]*$',
                                                                                                             'Only numbers are allowed.')],
                                                           verbose_name='Upload Bandwidth (kbit/s)')),
                ('notification_enabled', models.BooleanField(default=False, verbose_name='Notify User,Group(s)')),
                ('summary', models.TextField(blank=True, max_length=500, null=True, verbose_name='Summary')),
            ],
            options={
                'verbose_name': 'Quota',
                'verbose_name_plural': 'Quotas',
            },
        ),
        migrations.CreateModel(
            name='Certificate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, validators=[
                    django.core.validators.RegexValidator('^[0-9a-zA-Z\\,_.-]*$',
                                                          'Only alphanumeric characters are allowed.')],
                                          verbose_name='Name')),
                ('issuing_time', models.DateField(default=None, verbose_name='Issuing time')),
                ('expire_time', models.DateField(default=None, verbose_name='Expire time')),
                ('key_length', models.IntegerField(default=None, verbose_name='Key length')),
                ('cert_id', models.CharField(max_length=20, verbose_name='Certificate ID')),
                ('country', models.CharField(max_length=100, verbose_name='Country')),
                ('state', models.CharField(max_length=100, verbose_name='State')),
                ('locality', models.CharField(max_length=100, verbose_name='Locality')),
                ('organization', models.CharField(max_length=100, verbose_name='Organization')),
                ('organization_unit_name', models.CharField(max_length=100, verbose_name='Organization unit name')),
                ('common_name', models.CharField(max_length=100, verbose_name='Common name')),
                ('email', models.EmailField(default=None, max_length=254, verbose_name='Email')),
                ('format', models.CharField(max_length=20, verbose_name='Format')),
                ('uploaded_file',
                 models.FileField(blank=True, null=True, upload_to='', verbose_name='Certificate file')),
            ],
            options={
                'verbose_name': 'Certificate',
                'verbose_name_plural': 'Certificates',
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, validators=[
                    django.core.validators.RegexValidator('^[0-9a-zA-Z\\,_.-]*$',
                                                          'Only alphanumeric characters are allowed.')],
                                          verbose_name='Name')),
                ('force_logout_group', models.NullBooleanField(default=False, help_text='Logged out users immediatly',
                                                               verbose_name='Apply changes immediately')),
                ('status', models.IntegerField(blank=True, default=0, null=True)),
                ('access_time', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                                  related_name='group_access_time', to='user_app.AccessTime')),
            ],
            options={
                'verbose_name': 'Group',
                'verbose_name_plural': 'Groups',
            },
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.PositiveIntegerField(validators=[
                    django.core.validators.RegexValidator(message='Enter a positive number from 1 to any',
                                                          regex='^[1-9]\\d*$')], verbose_name='Priority')),
                ('group',
                 models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='group_id',
                                   to='user_app.Group')),
            ],
            options={
                'verbose_name': 'Membership',
                'verbose_name_plural': 'Memberships',
            },
        ),
        migrations.CreateModel(
            name='ProfilePermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access_rights',
                 models.ManyToManyField(default=None, related_name='profiles', to='user_app.AccessRight')),
            ],
            options={
                'verbose_name': 'Permission',
                'verbose_name_plural': 'Permissions',
            },
        ),
        migrations.CreateModel(
            name='ProfilePermissionModule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('module', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='ProfilePermissionName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=50, unique=True, validators=[
                    django.core.validators.RegexValidator('^[0-9a-zA-Z\\,_.-]*$',
                                                          'Only alphanumeric characters are allowed.')],
                                              verbose_name='Username')),
                ('auth_type', models.CharField(blank=True,
                                               choices=[('pass', 'Password'), ('mac', 'MAC Auth'), ('ip', 'IP Auth'),
                                                        ('cert', 'Certificate'), ('OTP', 'Others')], default=None,
                                               max_length=5, null=True, verbose_name='Authentication type')),
                ('password',
                 models.CharField(blank=True, default=None, max_length=100, null=True, verbose_name='Password')),
                ('ip', models.GenericIPAddressField(blank=True, default=None, null=True, verbose_name='IP Authentic')),
                ('full_name', models.CharField(blank=True, default=None, max_length=100, null=True, validators=[
                    django.core.validators.RegexValidator('^[0-9a-zA-Z\\, _.-]*$',
                                                          'Only alphanumeric & Space characters are allowed.')],
                                               verbose_name='Fullname')),
                ('email', models.EmailField(blank=True, default=None, max_length=254, null=True, verbose_name='Email')),
                ('force_logout', models.BooleanField(default=False, help_text='Logged out users immediatly',
                                                     verbose_name='Apply changes immediately')),
                ('IP_binding',
                 models.CharField(blank=True, default=None, max_length=500, null=True, verbose_name='IP binding')),
                ('MAC_binding',
                 models.CharField(blank=True, default=None, max_length=500, null=True, verbose_name='MAC binding')),
                ('status', models.IntegerField(blank=True, default=0, null=True)),
                ('add_update_status', models.CharField(blank=True, default='add', max_length=100, null=True)),
                ('access_time',
                 models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE,
                                   related_name='user_access_time', to='user_app.AccessTime',
                                   verbose_name='Access Time')),
                ('cert',
                 models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE,
                                   to='user_app.Certificate')),
                ('groups', models.ManyToManyField(blank=True, related_name='clients', through='user_app.Membership',
                                                  to='user_app.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'Client',
                'verbose_name_plural': 'Clients',
            },
        ),
        migrations.CreateModel(
            name='UserMac',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mac', models.CharField(blank=True, default=None, max_length=100, unique=True, verbose_name='MAC')),
                ('force_mac_auth', models.BooleanField(default=False, verbose_name='MAC binding')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_id_mac',
                                           to='user_app.User')),
            ],
            options={
                'verbose_name': 'User Mac',
                'verbose_name_plural': 'Users Mac',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='mac',
            field=models.ManyToManyField(blank=True, related_name='clients', to='user_app.UserMac',
                                         verbose_name='MAC Authentic'),
        ),
        migrations.AddField(
            model_name='user',
            name='quota',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='user_quota', to='user_app.Accounting'),
        ),
        migrations.AddField(
            model_name='profilepermission',
            name='profile_module_name',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_app.ProfilePermissionModule'),
        ),
        migrations.AddField(
            model_name='profilepermission',
            name='profile_name',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_app.ProfilePermissionName'),
        ),
        migrations.AddField(
            model_name='membership',
            name='user',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='user_id',
                                    to='user_app.User'),
        ),
        migrations.AddField(
            model_name='group',
            name='permission',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    to='user_app.ProfilePermission'),
        ),
        migrations.AddField(
            model_name='group',
            name='quota',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='group_quota', to='user_app.Accounting'),
        ),
    ]
